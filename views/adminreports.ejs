<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">

  <title><%- title %> - Correl8</title>
  <meta content="" name="description">
  <meta content="" name="keywords">

  <link href="../public/img/logo2.png" rel="icon">

  <link href="https://fonts.gstatic.com" rel="preconnect">
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <link href="../public/img/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">

  <link href="../public/css/main.css" rel="stylesheet">
  <link href="../public/css/reports.css" rel="stylesheet">

</head>

<body>

  <%- include('./partials/header.ejs') %>

  <%- include('./partials/adminsidebar.ejs') %>


  <main id="main" class="main">
    <div class="pagetitle mb-4">
      <h1>Reports</h1>
    </div>

    <!-- Create an unordered list to display dates (will be populated dynamically) -->
    <div class="list-group" id="dateList">
      <!-- List items will be added dynamically here -->
    </div>

    <!-- Display DetectedCorrelation details -->
    <div id="correlationDetails">
      <div id="historyContainer">
        <table id="correlationTable">
          <!-- Placeholder table for DetectedCorrelation details -->
          <!-- Table headers -->
          <tr>
            <th>Attribute</th>
            <th>Value</th>
          </tr>
        </table>
      </div>
    </div>

  </main>

</body>

<script>
  // Function to toggle DetectedCorrelation details visibility
  function toggleCorrelationDetails(dateId) {
    const correlationDetails = document.getElementById('correlationDetails');
    const correlationTable = document.getElementById('correlationTable');

    // Sample data for DetectedCorrelation (replace with dynamic data retrieval)
    const detectedCorrelationData = {
      FirstCorrName: 'FirstDataName ' + dateId,
      SecondCorrName: 'SecondDataName ' + dateId,
      FirstDataID: 'ID ' + dateId + '1',
      SecondDataID: 'ID ' + dateId + '2',
      DetcThreshold: '0.75',
      CorrTimeStart: '2024-01-0' + dateId + ' 10:00:00',
      CorrTimeEnd: '2024-01-0' + dateId + ' 11:00:00'
    };

    // Toggle visibility of DetectedCorrelation details based on dateId
    if (correlationDetails.style.display === 'none' || correlationDetails.getAttribute('data-id') !== dateId) {
      correlationDetails.style.display = 'block';
      correlationDetails.setAttribute('data-id', dateId);

      // Populate the correlation table with data
      correlationTable.innerHTML = `
        <tr><td>FirstCorrName:</td><td>${detectedCorrelationData.FirstCorrName}</td></tr>
        <tr><td>SecondCorrName:</td><td>${detectedCorrelationData.SecondCorrName}</td></tr>
        <tr><td>FirstDataID:</td><td>${detectedCorrelationData.FirstDataID}</td></tr>
        <tr><td>SecondDataID:</td><td>${detectedCorrelationData.SecondDataID}</td></tr>
        <tr><td>DetcThreshold:</td><td>${detectedCorrelationData.DetcThreshold}</td></tr>
        <tr><td>CorrTimeStart:</td><td>${detectedCorrelationData.CorrTimeStart}</td></tr>
        <tr><td>CorrTimeEnd:</td><td>${detectedCorrelationData.CorrTimeEnd}</td></tr>
      `;
    } else {
      correlationDetails.style.display = 'none';
      correlationDetails.removeAttribute('data-id');
    }
  }


  // Function to fetch data from database or API (simulated asynchronous operation)
  async function fetchData() {
    // Simulated data retrieval (replace with actual fetching logic)
    return new Promise(resolve => {
      // Simulated delay to mimic asynchronous operation
      setTimeout(() => {
        resolve([
          { dateId: '1', dateTime: '2024-01-01 10:00:00' },
          { dateId: '2', dateTime: '2024-01-12 10:30:00' },
          { dateId: '3', dateTime: '2024-01-23 11:23:34' },
          { dateId: '4', dateTime: '2024-01-3 09:20:22' },
        ]);
      }, 1000); // Simulated delay of 1 second
    });
  }

  // Function to populate the date list
  async function populateDateList() {
    const dateList = document.getElementById('dateList');

    try {
      // Fetch data asynchronously
      const dateArray = await fetchData();

      dateArray.forEach(item => {
        const listItem = document.createElement('a');
        listItem.href = '#';
        listItem.classList.add('list-group-item', 'list-group-item-action', 'flex-column', 'align-items-start');
        listItem.onclick = function () { toggleCorrelationDetails(item.dateId); };

        const listContent = `
          <div class="d-flex w-100 justify-content-between">
            <h5 class="mb-1">${item.dateTime}</h5>
          </div>
          <small>More information available. Click to view.</small>
        `;

        listItem.innerHTML = listContent;
        dateList.appendChild(listItem);
      });
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  // Call the function to populate the date list on page load
  populateDateList();
</script>
</html>